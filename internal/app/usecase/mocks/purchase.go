// Code generated by MockGen. DO NOT EDIT.
// Source: purchase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "blue-discount/internal/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPurchaseUsecase is a mock of PurchaseUsecase interface
type MockPurchaseUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPurchaseUsecaseMockRecorder
}

// MockPurchaseUsecaseMockRecorder is the mock recorder for MockPurchaseUsecase
type MockPurchaseUsecaseMockRecorder struct {
	mock *MockPurchaseUsecase
}

// NewMockPurchaseUsecase creates a new mock instance
func NewMockPurchaseUsecase(ctrl *gomock.Controller) *MockPurchaseUsecase {
	mock := &MockPurchaseUsecase{ctrl: ctrl}
	mock.recorder = &MockPurchaseUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPurchaseUsecase) EXPECT() *MockPurchaseUsecaseMockRecorder {
	return m.recorder
}

// Discount mocks base method
func (m *MockPurchaseUsecase) Discount(userID, prodcutID string) (model.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discount", userID, prodcutID)
	ret0, _ := ret[0].(model.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Discount indicates an expected call of Discount
func (mr *MockPurchaseUsecaseMockRecorder) Discount(userID, prodcutID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discount", reflect.TypeOf((*MockPurchaseUsecase)(nil).Discount), userID, prodcutID)
}
